const PDFDocument = require('pdfkit');
const archiver = require('archiver');
const fs = require('fs');
const path = require('path');

// Ensure downloads directory exists
const downloadsDir = path.join(__dirname, '..', 'downloads');
if (!fs.existsSync(downloadsDir)) {
  fs.mkdirSync(downloadsDir, { recursive: true });
}

const generatePDF = async (assessmentResult) => {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ margin: 50 });
      const chunks = [];

      doc.on('data', chunk => chunks.push(chunk));
      doc.on('end', () => resolve(Buffer.concat(chunks)));

      // Header
      doc.fontSize(24)
         .fillColor('#2C3E50')
         .text('Career Guidance Report', 50, 50, { align: 'center' });

      doc.fontSize(16)
         .fillColor('#7F8C8D')
         .text('Personalized Career Assessment Results', 50, 80, { align: 'center' });

      // Add some space
      doc.moveDown(2);

      // Student Information
      doc.fontSize(18)
         .fillColor('#2C3E50')
         .text('Student Information', 50, doc.y);

      doc.fontSize(12)
         .fillColor('#34495E')
         .text(`Name: ${assessmentResult.user.name}`, 70, doc.y + 20)
         .text(`Email: ${assessmentResult.user.email}`, 70, doc.y + 15)
         .text(`Assessment Date: ${new Date(assessmentResult.completedAt).toLocaleDateString()}`, 70, doc.y + 15);

      doc.moveDown(2);

      // Career Profile
      doc.fontSize(18)
         .fillColor('#2C3E50')
         .text('Your Career Profile', 50, doc.y);

      const profile = assessmentResult.careerProfile;
      
      doc.fontSize(14)
         .fillColor('#E74C3C')
         .text(`Dominant Career Type: ${profile.dominantType.toUpperCase()}`, 70, doc.y + 20);

      doc.moveDown(1);

      // Strengths
      doc.fontSize(16)
         .fillColor('#2C3E50')
         .text('Your Strengths:', 50, doc.y);

      profile.strengths.forEach((strength, index) => {
        doc.fontSize(12)
           .fillColor('#27AE60')
           .text(`• ${strength}`, 70, doc.y + 15);
      });

      doc.moveDown(1);

      // Recommended Careers
      doc.fontSize(16)
         .fillColor('#2C3E50')
         .text('Recommended Careers:', 50, doc.y);

      profile.recommendedCareers.forEach((career, index) => {
        doc.fontSize(12)
           .fillColor('#3498DB')
           .text(`${index + 1}. ${career.title} (${career.matchPercentage}% match)`, 70, doc.y + 20);
        
        doc.fontSize(10)
           .fillColor('#7F8C8D')
           .text(`   ${career.description}`, 90, doc.y + 12);
      });

      doc.moveDown(1);

      // Suggested Study Areas
      doc.fontSize(16)
         .fillColor('#2C3E50')
         .text('Suggested Study Areas:', 50, doc.y);

      profile.suggestedStudyAreas.forEach((area, index) => {
        doc.fontSize(12)
           .fillColor('#9B59B6')
           .text(`• ${area}`, 70, doc.y + 15);
      });

      // Add new page for assessment responses
      doc.addPage();

      doc.fontSize(18)
         .fillColor('#2C3E50')
         .text('Assessment Responses', 50, 50);

      assessmentResult.responses.forEach((response, index) => {
        doc.fontSize(14)
           .fillColor('#2C3E50')
           .text(`Question ${index + 1}:`, 50, doc.y + 30);

        doc.fontSize(11)
           .fillColor('#34495E')
           .text(response.question, 70, doc.y + 15, { width: 450 });

        doc.fontSize(12)
           .fillColor('#27AE60')
           .text(`Your Answer: ${response.answer}`, 70, doc.y + 20, { width: 450 });

        doc.fontSize(10)
           .fillColor('#E74C3C')
           .text(`Category: ${response.category}`, 70, doc.y + 15);
      });

      // Footer
      const currentY = doc.y + 50;
      if (currentY > 700) {
        doc.addPage();
      }

      doc.fontSize(10)
         .fillColor('#95A5A6')
         .text('Generated by Career Guidance Platform', 50, doc.page.height - 100, { align: 'center' })
         .text(`Report ID: ${assessmentResult._id}`, 50, doc.page.height - 85, { align: 'center' })
         .text(`Generated on: ${new Date().toLocaleDateString()}`, 50, doc.page.height - 70, { align: 'center' });

      doc.end();

    } catch (error) {
      reject(error);
    }
  });
};

const generateBulkPDFs = async (assessmentResults) => {
  return new Promise(async (resolve, reject) => {
    try {
      const archive = archiver('zip', { zlib: { level: 9 } });
      const chunks = [];

      archive.on('data', chunk => chunks.push(chunk));
      archive.on('end', () => resolve(Buffer.concat(chunks)));
      archive.on('error', reject);

      // Generate PDFs for each result
      for (const result of assessmentResults) {
        const pdfBuffer = await generatePDF(result);
        const filename = `career-report-${result.user.name.replace(/\s+/g, '-').toLowerCase()}.pdf`;
        archive.append(pdfBuffer, { name: filename });
      }

      // Add a summary file
      const summaryContent = generateSummaryText(assessmentResults);
      archive.append(summaryContent, { name: 'summary.txt' });

      archive.finalize();

    } catch (error) {
      reject(error);
    }
  });
};

const generateSummaryText = (assessmentResults) => {
  const summary = {
    totalStudents: assessmentResults.length,
    completionDate: new Date().toLocaleDateString(),
    careerTypes: {}
  };

  // Count career type distribution
  assessmentResults.forEach(result => {
    const type = result.careerProfile.dominantType;
    summary.careerTypes[type] = (summary.careerTypes[type] || 0) + 1;
  });

  let summaryText = `Career Assessment Summary Report\n`;
  summaryText += `Generated on: ${summary.completionDate}\n`;
  summaryText += `Total Students: ${summary.totalStudents}\n\n`;

  summaryText += `Career Type Distribution:\n`;
  Object.entries(summary.careerTypes).forEach(([type, count]) => {
    const percentage = Math.round((count / summary.totalStudents) * 100);
    summaryText += `- ${type}: ${count} students (${percentage}%)\n`;
  });

  summaryText += `\nStudent List:\n`;
  assessmentResults.forEach((result, index) => {
    summaryText += `${index + 1}. ${result.user.name} - ${result.careerProfile.dominantType}\n`;
  });

  return summaryText;
};

module.exports = {
  generatePDF,
  generateBulkPDFs
};
